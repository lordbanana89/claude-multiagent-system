{
  "permissions": {
    "allow": [
      "WebSearch",
      "Bash(pip install:*)",
      "Bash(langgraph:*)",
      "Bash(mkdir:*)",
      "WebFetch(domain:docs.langchain.com)",
      "Bash(brew install:*)",
      "Bash(python3:*)",
      "Bash(/opt/homebrew/bin/tmux new-session -d -s claude-backend-api)",
      "Bash(/opt/homebrew/bin/tmux send-keys -t claude-backend-api \"echo ''Claude Backend API Agent Ready - Type your commands here''\" Enter)",
      "Bash(/opt/homebrew/bin/tmux new-session -d -s claude-database)",
      "Bash(/opt/homebrew/bin/tmux send-keys -t claude-database \"echo ''Claude Database Agent Ready - Type your commands here''\" Enter)",
      "Bash(/opt/homebrew/bin/tmux new-session -d -s claude-frontend-ui)",
      "Bash(/opt/homebrew/bin/tmux send-keys -t claude-frontend-ui \"echo ''Claude Frontend UI Agent Ready - Type your commands here''\" Enter)",
      "Bash(ttyd:*)",
      "Bash(chmod:*)",
      "Bash(curl:*)",
      "Bash(/opt/homebrew/bin/tmux list-sessions)",
      "Bash(pkill:*)",
      "Bash(tmux list-sessions:*)",
      "Bash(tmux capture-pane:*)",
      "Bash(for session in claude-backend-api claude-database claude-frontend-ui claude-instagram claude-testing)",
      "Bash(do)",
      "Bash(tmux send-keys:*)",
      "Bash(done)",
      "Bash(echo:*)",
      "Bash(/opt/homebrew/bin/tmux new-session -d -s claude-supervisor)",
      "Bash(/opt/homebrew/bin/tmux send-keys -t claude-supervisor \"echo ''👨‍💼 Supervisor Agent Terminal Ready - Type your commands here''\" Enter)",
      "Bash(lsof:*)",
      "Bash(/opt/homebrew/bin/tmux capture-pane -t claude-supervisor -p)",
      "Bash(/opt/homebrew/bin/tmux send-keys -t claude-supervisor \"1\" Enter)",
      "Bash(/opt/homebrew/bin/tmux send-keys -t claude-supervisor \"Test del supervisor agent - delegare task agli altri agenti\" Enter)",
      "Bash(/opt/homebrew/bin/tmux send-keys -t claude-supervisor Enter)",
      "Bash(/opt/homebrew/bin/tmux send-keys -t claude-supervisor \"Leggi il file SUPERVISOR_INSTRUCTIONS.md per capire il tuo ruolo e come delegare task agli altri agenti\" Enter)",
      "Bash(/opt/homebrew/bin/tmux new-session -d -s claude-master)",
      "Bash(/opt/homebrew/bin/tmux send-keys -t claude-master \"echo ''🎖️ Master Agent Terminal Ready - Supreme Command Center''\" Enter)",
      "Bash(find:*)",
      "Bash(/opt/homebrew/bin/tmux send-keys -t claude-master \"inbox list\" Enter)",
      "Bash(/opt/homebrew/bin/tmux capture-pane -t claude-master -p)",
      "Bash(sed:*)",
      "Bash(/opt/homebrew/bin/tmux capture-pane -t claude-backend-api -p)",
      "Bash(/opt/homebrew/bin/tmux send-keys -t claude-backend-api \"echo ''TEST DIRETTO - questo dovrebbe essere eseguito immediatamente''\" \"Enter\")",
      "Bash(/opt/homebrew/bin/tmux send-keys -t claude-backend-api C-m)",
      "Bash(./start_complete_system.sh:*)",
      "Read(//Users/erik/Desktop/**)",
      "Bash(kill:*)",
      "Bash(awk:*)",
      "Bash(xargs kill:*)",
      "Bash(/opt/homebrew/bin/tmux send-keys -t claude-supervisor \"echo TEST COMMAND DIRECT\" Enter)",
      "Bash(/opt/homebrew/bin/tmux send-keys -t claude-supervisor \"C-c\")",
      "Bash(/opt/homebrew/bin/tmux send-keys -t claude-supervisor 'echo \"\"📩 Task [TEST123]: test message\"\"')",
      "Bash(/opt/homebrew/bin/tmux send-keys -t claude-supervisor \"Enter\")",
      "Bash(/opt/homebrew/bin/tmux send-keys -t claude-supervisor 'command -v task-status >/dev/null 2>&1 || source /Users/erik/Desktop/claude-multiagent-system/langgraph-test/task_commands.sh')",
      "Bash(command -v:*)",
      "Bash(/dev/null)",
      "Bash(source:*)",
      "Bash(task-help)",
      "Bash(task-status)",
      "Bash(/opt/homebrew/bin/tmux send-keys -t claude-backend-api \"✅ CONFERMATO - Procedi con core inbox infrastructure\" Enter)",
      "Bash(/opt/homebrew/bin/tmux send-keys -t claude-database \"✅ CONFERMATO - Procedi con database schema design\" Enter)",
      "Bash(/opt/homebrew/bin/tmux send-keys -t claude-frontend-ui \"✅ CONFERMATO - Procedi con inbox user interface\" Enter)",
      "Bash(/opt/homebrew/bin/tmux send-keys -t claude-testing \"✅ CONFERMATO - Procedi con inbox system testing\" Enter)",
      "Bash(/opt/homebrew/bin/tmux send-keys -t claude-master \"📋 SUPERVISOR: Task subdivision completata - tutti gli agenti confermati e attivi su inbox system integration\" Enter)",
      "Bash(/opt/homebrew/bin/tmux send-keys -t claude-backend-api \"1\" Enter)",
      "Bash(/opt/homebrew/bin/tmux send-keys -t claude-backend-api \"1\")",
      "Bash(/opt/homebrew/bin/tmux send-keys -t claude-backend-api Enter)",
      "Bash(/opt/homebrew/bin/tmux capture-pane -t claude-database -p)",
      "Bash(/opt/homebrew/bin/tmux capture-pane -t claude-frontend-ui -p)",
      "Bash(/opt/homebrew/bin/tmux capture-pane -t claude-testing -p)",
      "Bash(/opt/homebrew/bin/tmux send-keys -t claude-frontend-ui \"1\" Enter)",
      "Bash(/opt/homebrew/bin/tmux send-keys -t claude-testing \"1\" Enter)",
      "Bash(/opt/homebrew/bin/tmux send-keys -t claude-frontend-ui \"1\")",
      "Bash(/opt/homebrew/bin/tmux send-keys -t claude-frontend-ui Enter)",
      "Bash(/opt/homebrew/bin/tmux send-keys -t claude-testing \"1\")",
      "Bash(/opt/homebrew/bin/tmux send-keys -t claude-testing Enter)",
      "Bash(/opt/homebrew/bin/tmux send-keys -t claude-database \"Database schema completato. Procedi con ottimizzazioni e implementazione.\" Enter)",
      "Bash(/opt/homebrew/bin/tmux send-keys:*)",
      "Bash(/opt/homebrew/bin/tmux capture-pane -t claude-instagram -p)",
      "Bash(for session in claude-backend-api claude-database claude-frontend-ui claude-testing claude-instagram)",
      "Bash(do echo \"=== $session ===\")",
      "Bash(/opt/homebrew/bin/tmux capture-pane -t $session -p)",
      "Bash(for session in claude-backend-api claude-frontend-ui claude-testing)",
      "Bash(cat:*)",
      "Bash(/opt/homebrew/bin/tmux kill-session -t claude-database)",
      "Bash(for session in claude-backend-api claude-database claude-frontend-ui claude-testing)",
      "WebFetch(domain:github.com)",
      "Bash(for session in claude-backend-api claude-database claude-frontend-ui claude-testing claude-supervisor)",
      "Bash(do echo \"=== FINAL STATUS: $session ===\")",
      "WebFetch(domain:dramatiq.io)",
      "Bash(pip3 list:*)",
      "Bash(pip3 install:*)",
      "Bash(redis-cli:*)",
      "Bash(tmux new-session:*)",
      "Read(//Users/erik/.claude/**)",
      "WebFetch(domain:evilmartians.com)",
      "Bash(overmind:*)",
      "Bash(tmux ls:*)",
      "Bash(redis-server:*)",
      "Bash(npm install:*)",
      "Bash(mmdc:*)",
      "Bash(tmux kill-server:*)",
      "Bash(for session in claude-master claude-supervisor claude-backend-api claude-database claude-frontend-ui claude-testing claude-instagram claude-queue-manager claude-deployment)",
      "Bash(do tmux new-session -d -s $session)",
      "Bash(for:*)",
      "Bash(do echo \"=== $session ===\" tmux capture-pane -t $session -p)",
      "Bash(npm create:*)",
      "Bash(npx create-vite:*)",
      "Bash(npx tailwindcss init:*)",
      "Bash(npm run dev:*)",
      "Bash(open http://localhost:5173)",
      "Bash(do sed -i '' \"s/import { Handle, Position, NodeProps } from ''reactflow'';/import { Handle, Position } from ''reactflow'';\\nimport type { NodeProps } from ''reactflow'';/\" \"$file\")",
      "Bash(open http://localhost:5174)",
      "Bash(tree:*)",
      "Bash(open http://localhost:5175)",
      "Bash(tmux kill-session:*)",
      "Bash(npm run build:*)",
      "Bash(npx tsc:*)",
      "Bash(screencapture:*)",
      "Read(//tmp/**)",
      "Bash(open http://localhost:8501)",
      "Bash(python test:*)",
      "Bash(grep:*)",
      "Bash(claude --version)",
      "Bash(./create_shared_context.sh:*)",
      "Bash(./create_shared_context_fixed.sh:*)",
      "Bash(log_activity \"test-agent\" \"Testing the logging system\")",
      "Bash(read_context)",
      "Bash(tmux attach:*)",
      "Bash(osascript:*)",
      "Bash(./setup_mcp_for_claude.sh:*)",
      "Bash(./setup_complete_mcp_system.sh:*)",
      "Bash(./start_agent.sh:*)",
      "Bash(sqlite3:*)",
      "Bash(./monitor_system.sh:*)",
      "Bash(while read line)",
      "Bash(uvicorn:*)",
      "Bash(open /Users/erik/Desktop/claude-multiagent-system/test_api.html)",
      "Bash(time curl:*)",
      "Bash(/Users/erik/Desktop/claude-multiagent-system/setup_claude_hooks.sh)",
      "Bash(/Users/erik/Desktop/claude-multiagent-system/start_mcp_dashboard.sh)",
      "Bash(pgrep:*)",
      "Bash(open http://localhost:8090)",
      "Bash(tmux list-panes:*)",
      "Bash(./scripts/clean_and_restart_tmux.sh:*)",
      "Bash(/opt/homebrew/bin/tmux capture-pane -t claude-supervisor -p -S -3000)",
      "Bash(/opt/homebrew/bin/tmux list-panes -a -F \"#{session_name}: #{pane_current_command}\")",
      "WebFetch(domain:docs.claude.com)",
      "Bash(./backup_mcp_database.sh:*)",
      "Bash(ps:*)",
      "Bash(do echo -n \"Port $port: \")",
      "Bash(export CLAUDE_AGENT_NAME=backend-api)",
      "Bash(export MCP_SERVER_URL=\"http://localhost:9999\")",
      "Bash(./activate_mcp_bridge_complete.sh:*)",
      "Bash(./start_mcp_complete_terminal.sh:*)",
      "Bash(/tmp/test_mcp_complete.sh:*)",
      "Bash(timeout:*)",
      "Bash(do echo -n \"   Testing $tool... \")",
      "WebFetch(domain:spec.modelcontextprotocol.io)",
      "Bash(export AGENT_NAME=backend-api)",
      "Bash(export MCP_URL=http://localhost:9999)",
      "Bash(init_agent testing)",
      "Bash(init_agent frontend-ui)",
      "Bash(log_activity frontend-ui task 'Need API for login form' '{\"\"requesting\"\":\"\"backend-api\"\"}')",
      "Bash(init_agent database)",
      "Bash(export AGENT_NAME=frontend-ui)",
      "Bash(check_agents)",
      "Bash(send_message frontend-ui backend-api \"Need login API endpoint - working on login form UI. Please provide POST /api/auth/login endpoint that accepts username/password and returns JWT token\")",
      "Bash(status frontend-ui busy \"Building login form UI\")",
      "Bash(read_inbox)",
      "Bash(view_activities)",
      "Bash(export AGENT_NAME=testing)",
      "Bash(log_activity testing \"task\" \"Testing agent_tools.sh functionality\" '{\"\"test\"\": true}')",
      "Bash(read_inbox frontend-ui)",
      "Bash(init_agent supervisor)",
      "Bash(send_message:*)",
      "Bash(read_inbox supervisor)",
      "Bash(do echo \"=== Port $port ===\")",
      "Bash(bash:*)",
      "Bash(/Users/erik/Desktop/claude-multiagent-system/control_agents.sh status)",
      "Bash(/Users/erik/Desktop/claude-multiagent-system/control_agents.sh:*)",
      "Bash(\"/Users/erik/Desktop/cartella senza nome 4/init_all_agents.sh\")",
      "Bash(do echo \"=== Table: $table ===\")",
      "Bash(heartbeat)",
      "Bash(status testing \"busy\" \"Testing MCP tools functionality\")",
      "Bash(status database busy \"Testing database operations\")",
      "Bash(log_activity testing \"test\" \"Testing activity logging feature\" '{\"\"test_phase\"\":\"\"initial\"\",\"\"status\"\":\"\"running\"\"}')",
      "Bash(log_activity testing \"test\" \"Testing auth endpoint - Invalid credentials response received\" '{\"\"endpoint\"\":\"\"/api/auth/login\"\",\"\"status\"\":\"\"working\"\",\"\"response\"\":\"\"Invalid credentials\"\"}')",
      "Bash(init_agent instagram)",
      "Bash(init_agent queue-manager)",
      "Bash(read_inbox testing)",
      "Bash(export AGENT_NAME=queue-manager)",
      "Bash(status queue-manager \"busy\" \"Processing task queue\")",
      "Bash(export AGENT_NAME=deployment)",
      "Bash(status database idle \"Persistence tables ready\")",
      "Bash(log_activity:*)",
      "Bash(status testing \"idle\" \"Test completed successfully\")",
      "Bash(status queue-manager \"idle\")",
      "Bash(export AGENT_NAME=instagram)",
      "Bash(status database busy \"Designing persistence schema and migrating tables\")",
      "Bash(status instagram \"busy\" \"Planning integration hooks\")",
      "Bash(do send_message:*)",
      "Bash(./execute_rollout.sh)",
      "Bash(status database busy \"ROLLOUT: Saving state for deployment\")",
      "Bash(status queue-manager \"paused\" \"Queue paused for deployment rollout\")",
      "Bash(status instagram \"idle\" \"Integration configured - awaiting next task\")",
      "Bash(status queue-manager \"busy\" \"Resuming queue processing post-deployment\")",
      "Bash(status testing \"ready\" \"Standing by for deployment validation\")",
      "Bash(status database idle \"Deployment ready - awaiting Phase 3\")",
      "Bash(status database busy \"PRODUCTION DEPLOYMENT: Active monitoring\")",
      "Bash(heartbeat testing)",
      "Bash(status database idle \"Production deployment complete\")",
      "Bash(do echo \"=== Health Check Round $i ===\")",
      "Bash(status deployment \"idle\" \"Deployment complete - monitoring\")",
      "Bash(heartbeat:*)",
      "Bash(status testing \"busy\" \"Executing Phase 4 comprehensive validation\")",
      "Bash(if [ -w mcp_system.db ])",
      "Bash(then echo \"  ⚠️ Database is writable\")",
      "Bash(else echo \"  ✅ Database read-only\")",
      "Bash(fi)",
      "Bash(time sqlite3:*)",
      "Bash(status testing \"idle\" \"Phase 4 validation complete - System production ready\")",
      "Bash(status deployment \"idle\" \"Mission complete - standing by\")",
      "Bash(status testing \"idle\" \"Mission complete - standing by\")",
      "Bash(mv:*)"
    ],
    "deny": [],
    "ask": []
  },
  "model": "opus"
}