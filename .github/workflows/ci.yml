name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'

env:
  PYTHON_VERSION: '3.11'
  REDIS_VERSION: '7.2'

jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install black flake8 isort bandit

    - name: Run Black
      run: black --check --line-length=100 .

    - name: Run isort
      run: isort --check-only --profile=black --line-length=100 .

    - name: Run Flake8
      run: flake8 . --max-line-length=100 --extend-ignore=E203,W503,E501

    - name: Run Bandit (Security)
      run: bandit -r . -ll --skip B101

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: lint

    services:
      redis:
        image: redis:${{ env.REDIS_VERSION }}
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y tmux

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-cov pytest-timeout
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

    - name: Run Phase 0 tests
      run: python tests/test_phase0.py

    - name: Run Dramatiq tests
      run: python tests/test_dramatiq.py

    - name: Run pytest
      run: |
        pytest tests/ -v --tb=short \
          --cov=core --cov=task_queue --cov=monitoring \
          --cov-report=term-missing \
          --cov-report=xml

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        fail_ci_if_error: false

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: lint

    steps:
    - uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        severity: 'CRITICAL,HIGH'

    - name: Upload Trivy results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  docker:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: false
        tags: claude-multiagent:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

  documentation:
    name: Check Documentation
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Check markdown links
      uses: gaurav-nelson/github-action-markdown-link-check@v1
      with:
        use-quiet-mode: 'yes'
        config-file: '.markdown-link-check.json'

    - name: Spell check
      uses: streetsidesoftware/cspell-action@v5
      with:
        files: |
          **/*.md
          **/*.py
        config: '.cspell.json'
      continue-on-error: true

  performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push'

    services:
      redis:
        image: redis:${{ env.REDIS_VERSION }}
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

    - name: Run performance tests
      run: python tests/test_queue_performance.py
      continue-on-error: true

    - name: Upload performance results
      uses: actions/upload-artifact@v3
      with:
        name: performance-results
        path: |
          logs/*.jsonl
          logs/*.log
      if: always()

  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [lint, test, security]
    if: always()

    steps:
    - name: Check job statuses
      id: check
      run: |
        if [ "${{ needs.lint.result }}" == "failure" ] || \
           [ "${{ needs.test.result }}" == "failure" ] || \
           [ "${{ needs.security.result }}" == "failure" ]; then
          echo "status=failure" >> $GITHUB_OUTPUT
        else
          echo "status=success" >> $GITHUB_OUTPUT
        fi

    - name: Set status message
      run: |
        if [ "${{ steps.check.outputs.status }}" == "failure" ]; then
          echo "❌ CI Pipeline Failed" >> $GITHUB_STEP_SUMMARY
          echo "Please check the failed jobs above" >> $GITHUB_STEP_SUMMARY
        else
          echo "✅ CI Pipeline Passed" >> $GITHUB_STEP_SUMMARY
          echo "All checks completed successfully" >> $GITHUB_STEP_SUMMARY
        fi